import{_ as e,r as t,o,c as i,b as n,e as s,d as p,a as c}from"./app-ab3f265b.js";const l={},r=n("h1",{id:"make-use-of-plugins",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#make-use-of-plugins","aria-hidden":"true"},"#"),s(" Make use of plugins")],-1),d=n("p",null,"Another way to make your code more modular is to use plugins. All the plugins should be used in the whole project, so you can use them in any app. This will allow you to extend the functionality of your bot without having to modify the core code. Also this you can use the plugins feature to make use of singletons to avoid code duplication.",-1),u=n("h2",{id:"example-plugin-singleton",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#example-plugin-singleton","aria-hidden":"true"},"#"),s(" Example Plugin Singleton")],-1),m={href:"https://www.prisma.io/",target:"_blank",rel:"noopener noreferrer"},k=c(`<p>First, let&#39;s create in the plugins folder a directory called <code>database</code> and inside of it a file called <code>db.ts</code> where we will initialize the database connection.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// plugins/database/db.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> PrismaClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@prisma/client&#39;</span>

<span class="token keyword">const</span> prisma <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrismaClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> prisma
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we have one instance of the database connection that can be used across all our code.</p><h3 id="extend-the-context-with-the-prisma-instance" tabindex="-1"><a class="header-anchor" href="#extend-the-context-with-the-prisma-instance" aria-hidden="true">#</a> Extend the context with the prisma instance</h3><p>Now we can create a plugin that will include the prisma instance in the context.</p><p>First, let&#39;s create the context flavor for the plugin, in the <code>plugins/database</code> directory create a file called <code>context.ts</code> and add the following code:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// plugins/database/context.ts</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">DatabaseContext</span> <span class="token punctuation">{</span>
  prisma<span class="token operator">:</span> PrismaClient
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And use this context flavor in your main context file <code>context.ts</code>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// context.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Base <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discord.js&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> BaseContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discord.js-mvc&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> DatabaseContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./plugins/database/context&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Context<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Base<span class="token operator">&gt;</span></span> <span class="token operator">=</span> BaseContext<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> DatabaseContext
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we will have access to the prisma instance in the context.</p><h3 id="create-a-plugin-to-initialize-the-prisma-instance" tabindex="-1"><a class="header-anchor" href="#create-a-plugin-to-initialize-the-prisma-instance" aria-hidden="true">#</a> Create a plugin to initialize the prisma instance</h3><p>Now we can create a plugin that will initialize the prisma instance and add it to the context.</p><p>In the <code>plugins/database</code> directory create a file called <code>index.ts</code> and add the following code:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// plugins/database/index.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Plugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discord.js-mvc&#39;</span>
<span class="token keyword">import</span> prisma <span class="token keyword">from</span> <span class="token string">&#39;./db&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> PrismaPlugin<span class="token operator">:</span> Plugin<span class="token operator">&lt;</span>Context<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Add the prisma instance to the context</span>
    ctx<span class="token punctuation">.</span>prisma <span class="token operator">=</span> prisma
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Remember to add the plugin to the main <code>router.ts</code> file:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// router.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Router<span class="token punctuation">,</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discord.js-mvc&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> PrismaPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./plugins/database&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span>PrismaPlugin<span class="token punctuation">)</span>
    <span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Info</p><p>Remember that <code>ctx.prisma</code> will be available in all your controllers and middlewares. If you want to use the prisma instance in other code that is not related to <code>discord.js-mvc</code> you can import the <code>db.ts</code> file.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// other code</span>
<span class="token keyword">import</span> prisma <span class="token keyword">from</span> <span class="token string">&#39;./plugins/database/db&#39;</span>

<span class="token comment">// use prisma</span>
prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,17);function v(h,b){const a=t("ExternalLinkIcon");return o(),i("div",null,[r,d,u,n("p",null,[s("Let's say you have a plugin that handles the database connection, you can use the plugin to create a singleton that can be used across all your apps. For this example we will use the "),n("a",m,[s("Prisma ORM"),p(a)])]),k])}const y=e(l,[["render",v],["__file","plugins.html.vue"]]);export{y as default};
