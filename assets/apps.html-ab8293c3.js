import{_ as t,r as o,o as i,c as p,b as n,e as a,d as r,w as c,a as s}from"./app-ab3f265b.js";const d={},l=s(`<h1 id="apps" tabindex="-1"><a class="header-anchor" href="#apps" aria-hidden="true">#</a> Apps</h1><p>When your codebase grows bigger and bigger it&#39;s starts to become painful to have a single router and to store all your controllers in the same directory, that&#39;s why <code>discord.js-mvc</code> comes with the concept of apps, an app is a directory that contains a grouped set of controllers, middlewares, and plugins, based on logic, for example, you can have an app for the moderation commands, and another app for the music commands, and another app for the fun commands, and so on.</p><h2 id="creating-an-app" tabindex="-1"><a class="header-anchor" href="#creating-an-app" aria-hidden="true">#</a> Creating an app</h2><p>You can manually create an app by creating an apps directory in the root of your project and then create a directory for your app inside the apps directory, then you can create a <code>Route.manager.group</code> file inside the app directory and export it.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> apps
<span class="token function">mkdir</span> apps/moderation
<span class="token function">touch</span> apps/moderation/index.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>or you can use the <code>generate</code> command to generate the app directory and the <code>Route.manager.group</code> file.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>djs-mvc generate app moderation
<span class="token comment"># or</span>
djs-mvc g a moderation
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will generate the following files:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>apps
└── moderation
    ├── controllers
    │   └── moderation.controller.ts
    ├── index.ts
    └── middlewares
        └── moderation.middleware.ts

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In your <code>apps/moderation/index.ts</code> file, you can create a router and export it.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discordjs-mvc&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Context <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../context&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Route<span class="token punctuation">.</span>manager<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// add here a prefix for your routes</span>
    <span class="token comment">// so in a big project you can have</span>
    <span class="token comment">// multiple apps with the same routes</span>
    prefix<span class="token operator">:</span> <span class="token string">&#39;mod&#39;</span>
    middleware<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token comment">// you can add your middlewares here</span>
        <span class="token comment">// for this group of routes</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    routes<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token comment">// here you can add your routes</span>
        <span class="token keyword">new</span> <span class="token class-name">Route<span class="token operator">&lt;</span>Context<span class="token operator">&lt;</span>ButtonInteraction<span class="token operator">&gt;&gt;</span></span><span class="token punctuation">(</span><span class="token string">&#39;ban&#39;</span><span class="token punctuation">,</span> banController<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),u={class:"hint-container tip"},m=n("p",{class:"hint-container-title"},"Tips",-1),v=n("code",null,"Route.manager.group",-1),h=s(`<h2 id="using-an-app" tabindex="-1"><a class="header-anchor" href="#using-an-app" aria-hidden="true">#</a> Using an app</h2><p>Now you have created your app, you can use it in your main router.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> moderationApp <span class="token keyword">from</span> <span class="token string">&#39;./apps/moderation&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
        <span class="token comment">// your other routes</span>
        moderationApp
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>When your project grows, you can create a directory for each app in the <code>apps</code> directory and then create a <code>index.ts</code> file in the <code>apps</code> directory and export all your apps from it. Also you can stop creating controllers in your main router and switch to using apps only.</p></div><h2 id="sharing-is-caring" tabindex="-1"><a class="header-anchor" href="#sharing-is-caring" aria-hidden="true">#</a> Sharing is caring</h2><p>You can share your apps with the community by publishing them to NPM, this way other people can use your apps in their projects.</p><div class="hint-container note"><p class="hint-container-title">Note</p><p>If you want to publish your app, you should specify the plugins and middlewares that your app uses, or install them as peer dependencies.</p></div>`,7);function k(g,b){const e=o("RouterLink");return i(),p("div",null,[l,n("div",u,[m,n("p",null,[a("For more information about the "),v,a(" method see the "),r(e,{to:"/guide/core-concepts/routing.html#adding-a-route-group"},{default:c(()=>[a("routing docs")]),_:1})])]),h])}const f=t(d,[["render",k],["__file","apps.html.vue"]]);export{f as default};
