import{_ as i,r as o,o as l,c as r,b as n,d as a,w as t,e as s,a as p}from"./app-ab3f265b.js";const u={},d=n("h1",{id:"ping-pong-bot",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ping-pong-bot","aria-hidden":"true"},"#"),s(" Ping Pong Bot")],-1),k=n("p",null,[s("This guide is a step-by-step tutorial on how to create a simple ping pong bot using "),n("code",null,"discord.js-mvc"),s(". The guide will walk you through the entire process of creating a bot from scratch.")],-1),v=n("p",null,"The guide will cover the following topics:",-1),m={class:"table-of-contents"},h=p(`<hr><p>For beginning, you need to create a new file called <code>index.js</code> in the root of your project. This file will be the entry point of your bot.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// index.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span>Client<span class="token punctuation">,</span> GatewayIntentBits<span class="token punctuation">,</span> Events<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discord.js&#39;</span>

<span class="token keyword">const</span> <span class="token constant">TOKEN</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DISCORD_TOKEN</span>

<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    intents<span class="token operator">:</span> <span class="token punctuation">[</span>GatewayIntentBits<span class="token punctuation">.</span>Guilds<span class="token punctuation">,</span> GatewayIntentBits<span class="token punctuation">.</span>GuildMessages<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>Events<span class="token punctuation">.</span>ClientReady<span class="token punctuation">,</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Logged in as </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>client<span class="token punctuation">.</span>user<span class="token operator">?.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

client<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token constant">TOKEN</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="create-the-router" tabindex="-1"><a class="header-anchor" href="#create-the-router" aria-hidden="true">#</a> Create the router</h2><p>To create the router, we will create a new file called <code>router.ts</code> in the root of our project. Inside this file, we will import 2 classes from <code>discord.js-mvc</code>:</p><ul><li><code>Router</code> - This class is used to create a new router.</li><li><code>Route</code> - This class is used to create a new route. Also, we will import the <code>pingController</code> from the <code>controllers</code> folder.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// router.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Router<span class="token punctuation">,</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discord.js-mvc&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> pingController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./controllers/ping.controller&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ChatInputCommandInteraction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discord.js&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Context <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./context&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="add-the-router-to-the-bot" tabindex="-1"><a class="header-anchor" href="#add-the-router-to-the-bot" aria-hidden="true">#</a> Add the router to the bot</h2><p>Now that we have our router, we can add it to the bot. To do so, we will import the <code>router</code> from the <code>router.ts</code> file and then we will add it in the main <code>index.ts</code> file to handle all the interactions and messages.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// index.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span>Client<span class="token punctuation">,</span> GatewayIntentBits<span class="token punctuation">,</span> Events<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discord.js&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> router <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./router&#39;</span>

<span class="token keyword">const</span> <span class="token constant">TOKEN</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DISCORD_TOKEN</span>

<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    intents<span class="token operator">:</span> <span class="token punctuation">[</span>GatewayIntentBits<span class="token punctuation">.</span>Guilds<span class="token punctuation">,</span> GatewayIntentBits<span class="token punctuation">.</span>GuildMessages<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>Events<span class="token punctuation">.</span>ClientReady<span class="token punctuation">,</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Logged in as </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>client<span class="token punctuation">.</span>user<span class="token operator">?.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>Events<span class="token punctuation">.</span>MessageCreate<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> router<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>Events<span class="token punctuation">.</span>InteractionCreate<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>interaction<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> router<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>interaction<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

client<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token constant">TOKEN</span><span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="create-a-slash-command" tabindex="-1"><a class="header-anchor" href="#create-a-slash-command" aria-hidden="true">#</a> Create a Slash Command</h2><p>We will create a slash command called <code>ping</code>. This command will respond with <code>Pong!</code> when executed. To store all the commands, we will create a new folder called <code>views</code> in the root of our project. Inside this folder, we will create a new folder called <code>commands</code> and inside this folder, we will create a new file called <code>ping.ts</code>.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// views/commands/ping.command.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span>SlashCommandBuilder<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discord.js&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">SlashCommandBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;ping&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;Replies with pong!&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="create-the-context-type" tabindex="-1"><a class="header-anchor" href="#create-the-context-type" aria-hidden="true">#</a> Create the Context type</h2><p>Since we are using TypeScript, we need to create a new type called <code>Context</code> so we can use intelisense and type checking.</p><p>For this, we will create a new file called <code>context.ts</code> in the root of our project.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Base <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;discord.js&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> BaseContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;discord.js-mvc&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Context<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Base<span class="token operator">&gt;</span></span> <span class="token operator">=</span> BaseContext<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Later, based on what plugins you are using, you can extend the <code>Context</code> type to add more properties.</p><div class="hint-container warning"><p class="hint-container-title">Note</p><p>Don&#39;t forget to use the generic type when creating the Context type, this way you can set the type of Context as MessageContext or InteractionContext by passing the type as a generic. Example: <code>Context&lt;Message&gt;</code> or <code>Context&lt;Interaction&gt;</code> Also for the better experience, for InteractionContext, you can use the type of interaction as a generic - <code>Context&lt;ChatInputCommandInteraction&gt;</code> or <code>Context&lt;ButtonInteraction&gt;</code> etc.</p></div><h2 id="create-a-controller" tabindex="-1"><a class="header-anchor" href="#create-a-controller" aria-hidden="true">#</a> Create a Controller</h2><p>To create a controller, we will create a new folder called <code>controllers</code> in the root of our project. Inside this folder, we will create a new file called <code>ping.ts</code>. As you can see, we are importing the <code>Context</code> type from the <code>context.ts</code> file and we are using it as a generic type so the <code>ctx</code> parameter will have the type of <code>Context&lt;ChatInputCommandInteraction&gt;</code> and the <code>ctx.interaction</code> will have the type of <code>ChatInputCommandInteraction</code>.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// controllers/ping.controller.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span>Controller<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discord.js-mvc&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>ChatInputCommandInteraction<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discord.js&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Context <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../context&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> pingController<span class="token operator">:</span> Controller<span class="token operator">&lt;</span>Context<span class="token operator">&lt;</span>ChatInputCommandInteraction<span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> ctx<span class="token punctuation">.</span>interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;Pong!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="create-a-route" tabindex="-1"><a class="header-anchor" href="#create-a-route" aria-hidden="true">#</a> Create a Route</h2><p>Even though we have a controller, we still need to create a route that will handle the slash command. To create and add a route to the router, we will use the <code>router</code>&#39;s <code>add</code> method and we will pass the <code>Route</code> as a parameter.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// router.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Router<span class="token punctuation">,</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discord.js-mvc&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> pingController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./controllers/ping.controller&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ChatInputCommandInteraction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discord.js&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Context <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./context&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token class-name">Route<span class="token operator">&lt;</span>Context<span class="token operator">&lt;</span>ChatInputCommandInteraction<span class="token operator">&gt;&gt;</span></span><span class="token punctuation">(</span><span class="token string">&#39;ping&#39;</span><span class="token punctuation">,</span> pingController<span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="create-a-message-route-optional" tabindex="-1"><a class="header-anchor" href="#create-a-message-route-optional" aria-hidden="true">#</a> Create a Message Route (Optional)</h2><p>Message commands are not supported by Discord anymore, but if you want to support them, you can create a new route for them. We will use the same Route class as for the slash commands, but we will pass the <code>Message</code> as a generic type. The first parameter of the <code>Route</code> class is the name of the route, in the Message Routes, the name is the message content and always will be a <code>RegExp</code>.</p><p>Using the Message as a generic type, the <code>ctx</code> parameter will have the type of <code>Context&lt;Message&gt;</code> and the <code>ctx.message</code> will have the type of <code>Message</code>.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// router.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Router<span class="token punctuation">,</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discord.js-mvc&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> pingController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./controllers/ping.controller&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ChatInputCommandInteraction<span class="token punctuation">,</span> <span class="token keyword">type</span> <span class="token class-name">Message</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discord.js&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Context <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./context&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token class-name">Route<span class="token operator">&lt;</span>Context<span class="token operator">&lt;</span>ChatInputCommandInteraction<span class="token operator">&gt;&gt;</span></span><span class="token punctuation">(</span><span class="token string">&#39;ping&#39;</span><span class="token punctuation">,</span> pingController<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">Route<span class="token operator">&lt;</span>Context<span class="token operator">&lt;</span>Message<span class="token operator">&gt;&gt;</span></span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ping</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">await</span> ctx<span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;pong&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>You can pass the an anonymous function as a second parameter to the <code>add</code> method to handle the route, but it&#39;s recommended to use a controller since it&#39;s easier to maintain in a large project.</p></div><h2 id="register-the-commands" tabindex="-1"><a class="header-anchor" href="#register-the-commands" aria-hidden="true">#</a> Register the commands</h2><p>For the commands to work, we need to register them.</p>`,32),g={href:"https://discordjs.guide/creating-your-bot/command-deployment.html",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"discord.js-mvc",-1),w=p(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> registerGlobalCommands<span class="token punctuation">,</span> registerGuildCommands <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;discord.js-mvc&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token constant">APP_ID</span><span class="token punctuation">,</span> <span class="token constant">TOKEN</span><span class="token punctuation">,</span> <span class="token constant">GUILD_ID</span><span class="token punctuation">}</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">;</span>

<span class="token comment">// check if the environment variables are set</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">APP_ID</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token constant">TOKEN</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token constant">GUILD_ID</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Missing environment variables&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">registerSuccess</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> commands <span class="token operator">=</span> data <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Successfully registered </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>commands<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> global commands</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">registerError</span><span class="token punctuation">(</span>error<span class="token operator">:</span> Error<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Register global commands</span>
<span class="token function">registerGlobalCommands</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    app<span class="token operator">:</span> <span class="token punctuation">{</span>
        clientId<span class="token operator">:</span> <span class="token constant">APP_ID</span><span class="token punctuation">,</span>
        token<span class="token operator">:</span> <span class="token constant">TOKEN</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    dir<span class="token operator">:</span> <span class="token string">&#39;/src/views/commands&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    registerSuccess<span class="token punctuation">,</span>
    registerError
<span class="token punctuation">)</span>

<span class="token comment">// Register guild commands</span>
<span class="token function">registerGuildCommands</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    app<span class="token operator">:</span> <span class="token punctuation">{</span>
        clientId<span class="token operator">:</span> <span class="token constant">APP_ID</span><span class="token punctuation">,</span>
        token<span class="token operator">:</span> <span class="token constant">TOKEN</span><span class="token punctuation">,</span>
        guildId<span class="token operator">:</span> <span class="token constant">GUILD_ID</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    dir<span class="token operator">:</span> <span class="token string">&#39;/src/views/commands&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    registerSuccess<span class="token punctuation">,</span>
    registerError
<span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Since you need to specify the path from the root of your profect, you can set a production environment to make it easier to register the commands.</p><div class="language-.env line-numbers-mode" data-ext=".env"><pre class="language-.env"><code>PRODUCTION=true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token constant">PRODUCTION</span> <span class="token punctuation">}</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env

<span class="token keyword">const</span> commandsDir <span class="token operator">=</span> <span class="token constant">PRODUCTION</span> <span class="token operator">?</span> <span class="token string">&#39;dist/views/commands&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;src/views/commands&#39;</span>

<span class="token keyword">await</span> <span class="token function">registerGlobalCommands</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  dir<span class="token operator">:</span> commandsDir<span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,2);function y(f,C){const e=o("router-link"),c=o("ExternalLinkIcon");return l(),r("div",null,[d,k,v,n("nav",m,[n("ul",null,[n("li",null,[a(e,{to:"#create-the-router"},{default:t(()=>[s("Create the router")]),_:1})]),n("li",null,[a(e,{to:"#add-the-router-to-the-bot"},{default:t(()=>[s("Add the router to the bot")]),_:1})]),n("li",null,[a(e,{to:"#create-a-slash-command"},{default:t(()=>[s("Create a Slash Command")]),_:1})]),n("li",null,[a(e,{to:"#create-the-context-type"},{default:t(()=>[s("Create the Context type")]),_:1})]),n("li",null,[a(e,{to:"#create-a-controller"},{default:t(()=>[s("Create a Controller")]),_:1})]),n("li",null,[a(e,{to:"#create-a-route"},{default:t(()=>[s("Create a Route")]),_:1})]),n("li",null,[a(e,{to:"#create-a-message-route-optional"},{default:t(()=>[s("Create a Message Route (Optional)")]),_:1})]),n("li",null,[a(e,{to:"#register-the-commands"},{default:t(()=>[s("Register the commands")]),_:1})])])]),h,n("p",null,[s("You can register the commands following the "),n("a",g,[s("official guide"),a(c)]),s(". or "),b,s(" provides a built-in to register guild and global commands.")]),w])}const I=i(u,[["render",y],["__file","ping-pong.html.vue"]]);export{I as default};
