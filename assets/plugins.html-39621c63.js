import{_ as a,r as e,o as t,c as o,b as p,e as n,d as c,w as l,a as i}from"./app-ab3f265b.js";const r={},u=i(`<h1 id="plugins" tabindex="-1"><a class="header-anchor" href="#plugins" aria-hidden="true">#</a> Plugins</h1><p>Plugins are a way to extend the functionality of DiscordJs MVC. You can create your own plugins or use the ones created by the community. The plugins are accessible from the <code>Context</code> object and can be used in the controller or in the middleware or other plugins.</p><h2 id="creating-a-plugin" tabindex="-1"><a class="header-anchor" href="#creating-a-plugin" aria-hidden="true">#</a> Creating a plugin</h2><p>A plugin is a basic function that takes a <code>Context</code> object as a parameter and return nothing. The plugin can be asynchronous or not. DiscordJs MVC provides a <code>PLugin</code> type to help you create your own plugins.</p><p>You can create a plugin in 2 ways:</p><ol><li>Create manually a plugin function and pass it to the <code>plugin</code> method of the router.</li><li>Use the <code>generate</code> command to generate a plugin file and then export the plugin function from it.</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>djs-mvc generate plugin myPlugin
<span class="token comment"># or</span>
djs-mvc g p myPlugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Plugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discordjs-mvc&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Context <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./context&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> myPlugin<span class="token operator">:</span> Plugin<span class="token operator">&lt;</span>Context<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Do something with the context</span>
    ctx<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="type-the-context" tabindex="-1"><a class="header-anchor" href="#type-the-context" aria-hidden="true">#</a> Type the context</h2><p>Now you have created your plugin, you can use it in your controller or in another plugin. But you may want to type the context to have access to the properties you have added in your plugin. To do that, you can create a new type that extends the <code>Context</code> type and add your properties.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// context.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Base <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discord.js&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> BaseContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discordjs-mvc&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Context<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Base<span class="token operator">&gt;</span></span> <span class="token operator">=</span> BaseContext<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or you can create a context flavor that extends the <code>BaseContext</code> type and add your properties. This is better if you want to publish your plugin and let the user extend the context.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> BaseContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discordjs-mvc&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">HelloFlavor</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// now you can use it like that</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Base <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discord.js&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> HelloFlavor <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./myPlugin&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Context <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./context&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Context<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Base<span class="token operator">&gt;</span></span> <span class="token operator">=</span> BaseContext<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> HelloFlavor<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This way, you can use the types of other plugins and extend them.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Base <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discord.js&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> HelloFlavor <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./myPlugin&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>OtherPluginFlavor<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./otherPlugin&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Context<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Base<span class="token operator">&gt;</span></span> <span class="token operator">=</span> BaseContext<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> HelloFlavor <span class="token operator">&amp;</span> OtherPluginFlavor<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="using-a-plugin" tabindex="-1"><a class="header-anchor" href="#using-a-plugin" aria-hidden="true">#</a> Using a plugin</h2><p>To use a plugin, you have to add it as a parameter of the router&#39;s plugin method.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> myPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./myPlugin&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> otherPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./otherPlugin&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Router <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discordjs-mvc&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span>
        myPlugin<span class="token punctuation">,</span> 
        otherPlugin
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="using-a-plugin-in-a-controller" tabindex="-1"><a class="header-anchor" href="#using-a-plugin-in-a-controller" aria-hidden="true">#</a> Using a plugin in a controller</h3><p>To use a plugin in a controller, you just need to get the plugin from the context.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Controller <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discordjs-mvc&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Context <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./context&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> myController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Controller<span class="token operator">&lt;</span>Context<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&#39;myController&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    ctx<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Info</p><p>The plugin can be used everywhere where you have access to the context.</p></div><h2 id="share-your-plugin" tabindex="-1"><a class="header-anchor" href="#share-your-plugin" aria-hidden="true">#</a> Share your plugin</h2>`,23);function d(k,m){const s=e("RouterLink");return t(),o("div",null,[u,p("p",null,[n("If you have a useful plugin that you want to share with the community, you can submit a pull request to add it to the "),c(s,{to:"/plugins/"},{default:l(()=>[n("plugins list")]),_:1}),n(". Or you can publish it on npm and add it to the community plugins list.")])])}const g=a(r,[["render",d],["__file","plugins.html.vue"]]);export{g as default};
