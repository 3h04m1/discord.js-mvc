import{_ as a,r as s,o as l,c as d,b as e,e as t,d as o,w as i,a as c}from"./app-ab3f265b.js";const u={},h=e("h1",{id:"core-concepts",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#core-concepts","aria-hidden":"true"},"#"),t(" Core Concepts")],-1),m={href:"https://discord.js.org/",target:"_blank",rel:"noopener noreferrer"},p={class:"table-of-contents"},v=c(`<h2 id="what-is-mvc" tabindex="-1"><a class="header-anchor" href="#what-is-mvc" aria-hidden="true">#</a> What is MVC?</h2><p>MVC stands for Model-View-Controller, it is a software design pattern that is widely used in web development. It is composed of three parts:</p><ul><li><strong>Model</strong>: The model is the data of your application, it can be a database, a file, or anything that contains data.</li><li><strong>View</strong>: The view is the part that is displayed to the user, it can be a message, a command, a button, or anything that is displayed to the user.</li><li><strong>Controller</strong>: The controller is the part that handles the user&#39;s input, basically, it is the part that handles the user&#39;s interactions with the bot.</li></ul><h2 id="how-does-it-work" tabindex="-1"><a class="header-anchor" href="#how-does-it-work" aria-hidden="true">#</a> How does it work?</h2><p>Discord.js MVC extends the functionality of discord.js by adding a router that handles the user&#39;s input and calls the right controller. It also provides a context object that wraps the discord.js message or interaction object and provides a lot of ways to make your code cleaner,easier to read and extend.</p><h2 id="why-should-i-use-it" tabindex="-1"><a class="header-anchor" href="#why-should-i-use-it" aria-hidden="true">#</a> Why should I use it?</h2><p>Discord.js MVC provides better development experience by providing some useful features like:</p><ul><li><strong>Middlewares</strong> to handle the user&#39;s input before calling the controller.</li><li><strong>Plugins</strong> to extend the functionality of the context object.</li><li><strong>Flavors</strong> to extend the context object.</li></ul><h2 id="how-to-structure-my-bot" tabindex="-1"><a class="header-anchor" href="#how-to-structure-my-bot" aria-hidden="true">#</a> How to structure my bot?</h2><p>Discord.js MVC encourages you to structure your bot by the MVC pattern, but it is not mandatory, you can use it as you want.</p><h3 id="project-structure" tabindex="-1"><a class="header-anchor" href="#project-structure" aria-hidden="true">#</a> Project structure</h3><p>We strongly recommend you to separate your bot&#39;s code into multiple files and folders to make it easier to maintain and extend</p><h4 id="folder-structure" tabindex="-1"><a class="header-anchor" href="#folder-structure" aria-hidden="true">#</a> Folder structure</h4><p>Seprate your bot&#39;s code into multiple folders, each folder should contain a specific part of your bot&#39;s code, for example, you can create a folder for <code>controllers</code>, <code>views</code>, <code>models</code>, <code>middlewares</code>, <code>plugins</code>, etc.</p><h4 id="file-structure" tabindex="-1"><a class="header-anchor" href="#file-structure" aria-hidden="true">#</a> File structure</h4><p>In the main folder of your bot you should have the index file that will start your bot, router file that will handle the user&#39;s input and call the right controller.</p><h4 id="how-to-structure-my-controllers-views-models-etc" tabindex="-1"><a class="header-anchor" href="#how-to-structure-my-controllers-views-models-etc" aria-hidden="true">#</a> How to structure my controllers, views, models, etc?</h4><p>You can structure your controllers, views, models, etc. as you want, but we recommend you to create a folder for each controller, view or model, based on your bot&#39;s functionality, for example, you can create a folder for all the controllers that are related to the user&#39;s profile, another folder for all the controllers that are related to the user&#39;s settings, etc. You should have something like this:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├── controllers
│   ├── profile
│   │   ├── index.ts
│   │   ├── edit.controller.ts
│   │   └── ...
│   ├── settings
│   │   ├── index.ts
│   │   ├── edit.controller.ts
│   │   └── ...
│   └── ...
├── views
│   ├── profile
│   │   ├── index.ts
│   │   ├── edit.command.ts
│   │   └── ...
│   ├── settings
│   │   ├── index.ts
│   │   ├── edit.command.ts
│   │   └── ...
│   └── ...
└── ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="naming-conventions" tabindex="-1"><a class="header-anchor" href="#naming-conventions" aria-hidden="true">#</a> Naming conventions</h4><p>We recommend you to name your files and folders based on their functionality, and the type of the function, class, object you are exporting, for example, you can name your controllers like this:</p><ul><li><code>edit.controller.ts</code>,</li><li><code>delete.controller.ts</code>,</li><li><code>create.controller.ts</code>,</li><li>etc</li></ul><p>and your views like this:</p><ul><li><code>edit.command.ts</code>,</li><li><code>delete.button.ts</code>,</li><li><code>create.form.ts</code>,</li><li>etc.</li></ul><p>For middlewares, plugins, and models you can name them like this:</p><ul><li><code>admin.middleware.ts</code>,</li><li><code>database.plugin.ts</code>,</li><li><code>user.model.ts</code>,</li><li>etc.</li></ul>`,26);function b(f,y){const n=s("ExternalLinkIcon"),r=s("router-link");return l(),d("div",null,[h,e("p",null,[t("Discord.js MVC is a wrapper around "),e("a",m,[t("discord.js"),o(n)]),t(" that provides a MVC architecture to build your discord bot, it is written in typescript and provides a lot of features to help you build your bot.")]),e("nav",p,[e("ul",null,[e("li",null,[o(r,{to:"#what-is-mvc"},{default:i(()=>[t("What is MVC?")]),_:1})]),e("li",null,[o(r,{to:"#how-does-it-work"},{default:i(()=>[t("How does it work?")]),_:1})]),e("li",null,[o(r,{to:"#why-should-i-use-it"},{default:i(()=>[t("Why should I use it?")]),_:1})]),e("li",null,[o(r,{to:"#how-to-structure-my-bot"},{default:i(()=>[t("How to structure my bot?")]),_:1}),e("ul",null,[e("li",null,[o(r,{to:"#project-structure"},{default:i(()=>[t("Project structure")]),_:1})])])])])]),v])}const g=a(u,[["render",b],["__file","index.html.vue"]]);export{g as default};
