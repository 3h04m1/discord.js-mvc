import{_ as n,o as a,c as s,a as t}from"./app-ab3f265b.js";const e={},o=t(`<h1 id="controllers" tabindex="-1"><a class="header-anchor" href="#controllers" aria-hidden="true">#</a> Controllers</h1><p>Controllers are the foundation of your application&#39;s business logic. The are responsible for handling the interaction, they are the final destination of the interaction.</p><hr><p><code>discord.js-mvc</code> doesn&#39;t provide any built-in controllers, but it provides a way to create and type your own controllers.</p><p>There are 2 methods to create a controller:</p><ol><li>You can manually create a controller function and pass it to the <code>Route</code> class.</li><li>You can use the <code>generate</code> command to generate a controller file and then export the controller function from it.</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>djs-mvc generate controller <span class="token function">ping</span>
<span class="token comment"># or</span>
djs-mvc g c <span class="token function">ping</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="controller" tabindex="-1"><a class="header-anchor" href="#controller" aria-hidden="true">#</a> Controller</h2><p>A controller is a function that will be executed when the route is triggered. It can be an anonymous function or a function that you create in a separate file. We strongly recommend using a separate file for each controller. This way you can easily manage your controllers.</p><h3 id="anonymous-function" tabindex="-1"><a class="header-anchor" href="#anonymous-function" aria-hidden="true">#</a> Anonymous function</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">new</span> <span class="token class-name">Route<span class="token operator">&lt;</span>Context<span class="token operator">&lt;</span>ButtonInteraction<span class="token operator">&gt;&gt;</span></span><span class="token punctuation">(</span><span class="token string">&#39;ping&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> ctx<span class="token punctuation">.</span>interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;pong&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="separate-file" tabindex="-1"><a class="header-anchor" href="#separate-file" aria-hidden="true">#</a> Separate file</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// controllers/ping.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> pingController<span class="token operator">:</span>Controller<span class="token operator">&lt;</span>Context<span class="token operator">&lt;</span>CommandInteraction<span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> ctx<span class="token punctuation">.</span>interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;pong&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="controller-types-and-generics" tabindex="-1"><a class="header-anchor" href="#controller-types-and-generics" aria-hidden="true">#</a> Controller types and generics</h3><p>Typeing the controller function is optional, but it is recommended. It makes easier to work with the interaction as the default interaction type is <code>Interaction</code> and it can become frustrating to check the type of the interaction every time.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>Events<span class="token punctuation">.</span>InteractionCreate<span class="token punctuation">,</span> <span class="token punctuation">(</span>interaction<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>interaction<span class="token punctuation">.</span><span class="token function">isButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// interaction is ButtonInteraction</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>interaction<span class="token punctuation">.</span><span class="token function">isCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// interaction is CommandInteraction</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To avoid this, you can type the controller function and provide the type of the interaction as a generic type of the <code>Route</code> class in case of anonymous function or as a generic type of the <code>Controller</code> type in case of separate file. The type of the interaction is provided by the <code>Context&lt;{InteractionType}&gt;</code> type.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// anonymous function</span>
<span class="token keyword">new</span> <span class="token class-name">Route<span class="token operator">&lt;</span>Context<span class="token operator">&lt;</span>ButtonInteraction<span class="token operator">&gt;&gt;</span></span><span class="token punctuation">(</span><span class="token string">&#39;ping&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> ctx<span class="token punctuation">.</span>interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;pong&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// separate file</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> pingController<span class="token operator">:</span> Controller<span class="token operator">&lt;</span>Context<span class="token operator">&lt;</span>ButtonInteraction<span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>interaction<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> ctx<span class="token punctuation">.</span>interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;pong&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),p=[o];function c(i,l){return a(),s("div",null,p)}const u=n(e,[["render",c],["__file","controllers.html.vue"]]);export{u as default};
