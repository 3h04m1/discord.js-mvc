import{_ as t,r as o,o as r,c as l,a as e,d as a,b as s,e as i}from"./app-5ca25a60.js";const d={},c=e("h1",{id:"models-databases-orms",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#models-databases-orms","aria-hidden":"true"},"#"),a(" Models / Databases / ORMs")],-1),p=e("p",null,"This package does not include any database or ORM. You can use any database or ORM you want. Here are some examples:",-1),u={href:"https://mongoosejs.com/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://sequelize.org/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://typeorm.io/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.prisma.io/",target:"_blank",rel:"noopener noreferrer"},b=e("p",null,"Here you can find a few examples of how to use some of these ORMs with this package:",-1),k={id:"prisma",tabindex:"-1"},g=e("a",{class:"header-anchor",href:"#prisma","aria-hidden":"true"},"#",-1),f={href:"https://www.prisma.io/",target:"_blank",rel:"noopener noreferrer"},y=i(`<p>First, install the Prisma CLI globally:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># npm</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> prisma

<span class="token comment"># yarn</span>
<span class="token function">yarn</span> global <span class="token function">add</span> prisma

<span class="token comment"># pnpm</span>
<span class="token function">pnpm</span> <span class="token function">add</span> <span class="token parameter variable">-g</span> prisma
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, initialize Prisma in your project:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>prisma init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This will create a <code>prisma</code> folder with a <code>schema.prisma</code> file inside. Replace the content of this file with the following:</p><div class="language-prisma line-numbers-mode" data-ext="prisma"><pre class="language-prisma"><code>// provide the connection URL to your database as the \`url\` value
datasource db {
  provider = &quot;sqlite&quot; // your database driver
  url      = env(&quot;DATABASE_URL&quot;) // your database connection string
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, create a <code>.env</code> file in the root of your project with the following content:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">DATABASE_URL</span><span class="token operator">=</span><span class="token string">&quot;file:./dev.db&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Finally, run the following command to generate the Prisma client:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>prisma generate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="create-a-database-provider" tabindex="-1"><a class="header-anchor" href="#create-a-database-provider" aria-hidden="true">#</a> Create a database provider</h3><p>To not create a new Prisma client instance every time you need to access the database, you can create a database provider, in this case, a Prisma provider. This provider will be a singleton, so you can import it anywhere in your project and use it. Create a new file called <code>db.ts</code> in the <code>src</code> folder with the following content:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> PrismaClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@prisma/client&#39;</span>

<span class="token keyword">const</span> prisma <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrismaClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// Prevent multiple instances of Prisma Client in development</span>
prisma<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&#39;beforeExit&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  prisma<span class="token punctuation">.</span><span class="token function">$disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> prisma
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, you can import this provider anywhere in your project and use it:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> prisma <span class="token keyword">from</span> <span class="token string">&#39;./db&#39;</span>

<span class="token keyword">const</span> tasks <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>task<span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="create-a-database-model" tabindex="-1"><a class="header-anchor" href="#create-a-database-model" aria-hidden="true">#</a> Create a database model</h3><p>In prisma, you don&#39;t need to create a model in the project files, you can create it directly in the <code>schema.prisma</code> file.</p><div class="language-prisma line-numbers-mode" data-ext="prisma"><pre class="language-prisma"><code>model Task {
  id        Int      @id @default(autoincrement())
  title     String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After creating a new model, you need to run the following command to update the database schema:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>prisma migrate dev <span class="token parameter variable">--name</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="use-the-database-model" tabindex="-1"><a class="header-anchor" href="#use-the-database-model" aria-hidden="true">#</a> Use the database model</h3><p>Now, you can use the model in your project:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> prisma <span class="token keyword">from</span> <span class="token string">&#39;./db&#39;</span>

<span class="token keyword">const</span> tasks <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>task<span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),_={class:"hint-container tip"},w=e("p",{class:"hint-container-title"},"Tips",-1),x={href:"https://www.prisma.io/docs/",target:"_blank",rel:"noopener noreferrer"},T=i(`<h2 id="typeorm" tabindex="-1"><a class="header-anchor" href="#typeorm" aria-hidden="true">#</a> TypeORM</h2><p>First, install TypeORM globally:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># npm</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> typeorm

<span class="token comment"># yarn</span>
<span class="token function">yarn</span> global <span class="token function">add</span> typeorm

<span class="token comment"># pnpm</span>
<span class="token function">pnpm</span> <span class="token function">add</span> <span class="token parameter variable">-g</span> typeorm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, initialize TypeORM in your project:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>typeorm init <span class="token parameter variable">--database</span> sqlite
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5);function M(P,R){const n=o("ExternalLinkIcon");return r(),l("div",null,[c,p,e("ul",null,[e("li",null,[e("a",u,[a("Mongoose"),s(n)])]),e("li",null,[e("a",m,[a("Sequelize"),s(n)])]),e("li",null,[e("a",v,[a("TypeORM"),s(n)])]),e("li",null,[e("a",h,[a("Prisma"),s(n)])])]),b,e("h2",k,[g,a(),e("a",f,[a("Prisma"),s(n)])]),y,e("div",_,[w,e("p",null,[a("For more information about Prisma, check the "),e("a",x,[a("official documentation"),s(n)]),a(".")])]),T])}const A=t(d,[["render",M],["__file","models.html.vue"]]);export{A as default};
