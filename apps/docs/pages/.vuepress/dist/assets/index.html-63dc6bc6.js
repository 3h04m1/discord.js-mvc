import{_ as e,r as o,o as p,c as i,a as s,d as n,b as c,e as a}from"./app-5ca25a60.js";const l={},r=a(`<h1 id="ping-pong-bot" tabindex="-1"><a class="header-anchor" href="#ping-pong-bot" aria-hidden="true">#</a> Ping Pong Bot</h1><p>In this short guide, we will create a simple ping pong bot using <code>discord.js-mvc</code>.</p><hr><p>For beginning, you need to create a new file called <code>index.js</code> in the root of your project. This file will be the entry point of your bot.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/index.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span>Client<span class="token punctuation">,</span> GatewayIntentBits<span class="token punctuation">,</span> Events<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discord.js&#39;</span>

<span class="token keyword">const</span> <span class="token constant">TOKEN</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DISCORD_TOKEN</span>

<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    intents<span class="token operator">:</span> <span class="token punctuation">[</span>GatewayIntentBits<span class="token punctuation">.</span>Guilds<span class="token punctuation">,</span> GatewayIntentBits<span class="token punctuation">.</span>GuildMessages<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>Events<span class="token punctuation">.</span>ClientReady<span class="token punctuation">,</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Logged in as </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>client<span class="token punctuation">.</span>user<span class="token operator">?.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

client<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token constant">TOKEN</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="create-a-slash-command" tabindex="-1"><a class="header-anchor" href="#create-a-slash-command" aria-hidden="true">#</a> Create a Slash Command</h2><p>We will create a slash command called <code>ping</code>. This command will respond with <code>Pong!</code> when executed. To store all the commands, we will create a new folder called <code>views</code> in the root of our project. Inside this folder, we will create a new folder called <code>commands</code> and inside this folder, we will create a new file called <code>ping.ts</code>.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/views/commands/ping.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span>SlashCommandBuilder<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discord.js&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">SlashCommandBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;ping&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;Replies with pong!&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="create-a-controller" tabindex="-1"><a class="header-anchor" href="#create-a-controller" aria-hidden="true">#</a> Create a Controller</h2><p>To create a controller, we will create a new folder called <code>controllers</code> in the root of our project. Inside this folder, we will create a new file called <code>ping.ts</code>.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>Controller<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discord.js-mvc&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>CommandInteraction<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discord.js&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> pingController<span class="token operator">:</span> Controller<span class="token operator">&lt;</span>CommandInteraction<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>interaction<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;Pong!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="create-the-router" tabindex="-1"><a class="header-anchor" href="#create-the-router" aria-hidden="true">#</a> Create the router</h2><p>To create the router, we will create a new file called <code>router.ts</code> in the root of our project. Inside this file, we will import 2 classes from <code>discord.js-mvc</code>:</p><ul><li><code>Router</code> - This class is used to create a new router.</li><li><code>Route</code> - This class is used to create a new route. Also, we will import the <code>pingController</code> from the <code>controllers</code> folder.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>Router<span class="token punctuation">,</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discord.js-mvc&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> pingController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./controllers/pingController&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CommandInteraction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discord.js&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token class-name">Route<span class="token operator">&lt;</span>CommandInteraction<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&#39;ping&#39;</span><span class="token punctuation">,</span> pingController<span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="add-the-router-to-the-bot" tabindex="-1"><a class="header-anchor" href="#add-the-router-to-the-bot" aria-hidden="true">#</a> Add the router to the bot</h2><p>Now that we have our router, we can add it to the bot. To do so, we will import the <code>router</code> from the <code>router.ts</code> file and then we will add it in the main <code>index.ts</code> file to handle all the interactions.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/index.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span>Client<span class="token punctuation">,</span> GatewayIntentBits<span class="token punctuation">,</span> Events<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;discord.js&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> router <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./router&#39;</span>

<span class="token keyword">const</span> <span class="token constant">TOKEN</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DISCORD_TOKEN</span>

<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    intents<span class="token operator">:</span> <span class="token punctuation">[</span>GatewayIntentBits<span class="token punctuation">.</span>Guilds<span class="token punctuation">,</span> GatewayIntentBits<span class="token punctuation">.</span>GuildMessages<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>Events<span class="token punctuation">.</span>ClientReady<span class="token punctuation">,</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Logged in as </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>client<span class="token punctuation">.</span>user<span class="token operator">?.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>Events<span class="token punctuation">.</span>InteractionCreate<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>interaction<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> router<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>interaction<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

client<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token constant">TOKEN</span><span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="register-the-commands" tabindex="-1"><a class="header-anchor" href="#register-the-commands" aria-hidden="true">#</a> Register the commands</h2>`,19),u={href:"https://discordjs.guide/creating-your-bot/command-deployment.html",target:"_blank",rel:"noopener noreferrer"},d=s("code",null,"discord.js-mvc",-1),k=a(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> registerGlobalCommands<span class="token punctuation">,</span> registerGuildCommands <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;discord.js-mvc&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token constant">APP_ID</span><span class="token punctuation">,</span> <span class="token constant">TOKEN</span><span class="token punctuation">,</span> <span class="token constant">GUILD_ID</span><span class="token punctuation">}</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">;</span>

<span class="token comment">// check if the environment variables are set</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">APP_ID</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token constant">TOKEN</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token constant">GUILD_ID</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Missing environment variables&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">registerSuccess</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> commands <span class="token operator">=</span> data <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Successfully registered </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>commands<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> global commands</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">registerError</span><span class="token punctuation">(</span>error<span class="token operator">:</span> Error<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Register global commands</span>
<span class="token function">registerGlobalCommands</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    app<span class="token operator">:</span> <span class="token punctuation">{</span>
        clientId<span class="token operator">:</span> <span class="token constant">APP_ID</span><span class="token punctuation">,</span>
        token<span class="token operator">:</span> <span class="token constant">TOKEN</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    dir<span class="token operator">:</span> <span class="token string">&#39;/src/views/commands&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    registerSuccess<span class="token punctuation">,</span>
    registerError
<span class="token punctuation">)</span>

<span class="token comment">// Register guild commands</span>
<span class="token function">registerGuildCommands</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    app<span class="token operator">:</span> <span class="token punctuation">{</span>
        clientId<span class="token operator">:</span> <span class="token constant">APP_ID</span><span class="token punctuation">,</span>
        token<span class="token operator">:</span> <span class="token constant">TOKEN</span><span class="token punctuation">,</span>
        guildId<span class="token operator">:</span> <span class="token constant">GUILD_ID</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    dir<span class="token operator">:</span> <span class="token string">&#39;/src/views/commands&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    registerSuccess<span class="token punctuation">,</span>
    registerError
<span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Since you need to specify the path from the root of your profect, you can set a production environment to make it easier to register the commands.</p><div class="language-.env line-numbers-mode" data-ext=".env"><pre class="language-.env"><code>PRODUCTION=true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token constant">PRODUCTION</span><span class="token punctuation">}</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">;</span>

<span class="token keyword">const</span> commandsDir <span class="token operator">=</span> <span class="token constant">PRODUCTION</span> <span class="token operator">?</span> <span class="token string">&#39;dist/views/commands&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;src/views/commands&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> <span class="token function">registerGlobalCommands</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    dir<span class="token operator">:</span> commandsDir<span class="token punctuation">,</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,2);function v(m,b){const t=o("ExternalLinkIcon");return p(),i("div",null,[r,s("p",null,[n("You can register the commands following the "),s("a",u,[n("official guide"),c(t)]),n(". or "),d,n(" provides a built-in to register guild and global commands.")]),k])}const h=e(l,[["render",v],["__file","index.html.vue"]]);export{h as default};
